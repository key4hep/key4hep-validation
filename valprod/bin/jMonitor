#!/usr/bin/env python3
from valprod.utils.TestConfig import TestConfig
from valprod.workflow.TestWrapper import TestWrapper

def getParser():
  import argparse

  argParser = argparse.ArgumentParser()
  # job limit
  argParser.add_argument('-T', '--max-time', dest='maxTime', type=int, help='Time limit of process (s), if exceeded, process will be killed')
  argParser.add_argument('-WT', '--walltime', dest='walltime', help='Time limit of process (hh:mm:ss) for PBS, if exceeded, process will be killed')
  argParser.add_argument('-M', '--max-memory', dest='maxVIR', type=float, help='Memory limit of process (Mb), if exceeded, process will be killed')
  # log parser related
  argParser.add_argument('--enable-parser', dest='parser', action='store_true', help='If enabled, log of the process will be parsed')
  argParser.add_argument('-p', '--pattern', dest='fatalPattern', help='Python re patterns for the parser')
  # monitor related
  argParser.add_argument('--enable-monitor', dest='monitor', action='store_true', help='If enabled, process will be monitored (memory, cpu)')
  argParser.add_argument('-i', '--interval', dest='interval', type=float, default='0.5', help='Time interval for monitor')
  argParser.add_argument('-b', '--monitor-backend', dest='monitor_backend', default='root', choices=['root', 'matplotlib'], help='Backend for drawing monitoring figures')
  argParser.add_argument('-s', '--mon-subprocess', dest='monSubTask', action='store_true', help='whether monitor the sub-processes')
  argParser.add_argument('-r', '--enable-prmon', dest='prmon', action='store_true', help='use the prmon backend to monitor the process')
  # plot reference
  argParser.add_argument('--enable-plotref', dest='plotref', action='store_true', help='If enabled, results of the process will be compared')
  argParser.add_argument('-f', '--plotref-files', dest='plotreffile', help='reference file for plot testing')
  argParser.add_argument('-o', '--plotref-output', dest='plotrefoutput', default='plotcmp.root', help='output root file for plot comparison')
  argParser.add_argument('-m', '--histtest-method', dest='histtestmeth', choices=['Kolmogorov', 'Chi2'], default='Kolmogorov', help='Method of histogram testing')
  argParser.add_argument('-c', '--histtest-cut', dest='histtestcut', type=float, default='0.9', help='P-Value cut for histogram testing')
  # cmd
  argParser.add_argument('command', nargs='+', help='job to be monitored')
  argParser.add_argument('--gen-log', dest='log', action='store_true', help='whether to generate log file')
  argParser.add_argument('-n', '--name', dest='name', default="TEST", help='name of the job')

  return argParser

def configureArgs(args):

  cfg = TestConfig()
  cfg.setAttr('maxTime', args.maxTime)
  cfg.setAttr('walltime', args.walltime)
  cfg.setAttr('maxMEM', args.maxVIR)
  cfg.setAttr('parser', args.parser)
  if args.parser and args.fatalPattern:
    cfg.setAttr('fatalPattern', args.fatalPattern)
  if args.monitor:
    cfg.setAttr('MonBackend', args.monitor_backend)
    cfg.setAttr('CPUMonitor', True)
    cfg.setAttr('RESMonitor', True)
    cfg.setAttr('VIRMonitor', True)
    if args.interval:
      cfg.setAttr('timeInterval', args.interval)
  cfg.setAttr('monSubTask', args.monSubTask)
  cfg.setAttr('prmon', args.prmon)
  if args.plotref and args.plotreffile:
    cfg.setAttr('plotRef', args.plotreffile)
    cfg.setAttr('plotOutput', args.plotrefoutput)
    cfg.setAttr('histTestMeth', args.histtestmeth)
    cfg.setAttr('histTestCut', args.histtestcut)
  if args.log:
    # Use truncated cmd string + a random number if the test name is not specified
    if args.name == 'TEST':
      from random import randrange
      logname = args.command.replace(" ", "_")[:25] + str(randrange(1000)) + ".log"
    else:
      logname = args.name + ".log"
    cfg.setAttr('genLog', True)
    cfg.setAttr('logName', logname)

  return cfg

if __name__ == '__main__':
  parser = getParser()
  args = parser.parse_args()

  cfg = configureArgs(args)
  runner = TestWrapper(args.name, args.command, cfg)
  ok, summary = runner.run()
  print(summary)
  print('--------------------------------')
